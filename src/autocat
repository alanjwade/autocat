#!/usr/bin/python

import argparse
import re
import yaml
import csv
import os
from pprint import pprint
from piecash import open_book, ledger, Split


def read_config(fn):

    retval = False
    if fn.endswith('.yaml'):
        retval = read_yaml(fn)
    elif fn.endswith('.csv'):
        retval = read_csv(fn)
    return retval


def read_yaml(fn):
    '''Read in the yaml config file.'''

    with open(fn, "r") as stream:
        try:
            config = yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            print(exc)

    return config


def read_csv(fn):
    '''Read from a CSV.'''
    with open(fn) as f:
        reader = csv.DictReader(f)
        config = list(reader)

    return config


def modify_description(transaction, new_description):
    '''Change the transaction to have the new description (payee).'''
    transaction.description = new_description

    return transaction


def modify_category(transaction, new_account):
    '''Change the transaction to thave the new category (like 'charity').'''

    sps = list()

    for sp in transaction.splits:
        if 'Imbalance' in sp.account.name:
            #            print('found split')
            sp.account = new_account
        sps.append(sp)
    transaction.splits = sps

    return transaction

def add_memo(transaction, account_name, memo):

    sps = list()

    for sp in transaction.splits:
        print("found discover, acoount = {}:{}:{}:".format(sp.account.fullname, account_name, memo))
        if sp.account.fullname == account_name:
            if memo not in sp.memo:
                sp.memo = sp.memo + memo
                print('changing memo to {}'.format(memo))


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config', default='config/payee_list.yaml',
                        help='The yaml replacement config file.')
    parser.add_argument('-g', '--gnucashfile', default='test/gc_test.gnucash',
                        help='The .gnucash file to operate on.')

    args = parser.parse_args()

    replacement_list = read_config(args.config)
    re_list = list()


    with open_book(args.gnucashfile, readonly=False) as mybook:

        for payee_t in replacement_list:
            payee_t['orig_regex_comp'] = re.compile(payee_t['orig_regex'])
            payee_t['imbalance_new_account_t'] = mybook.accounts.get(
                fullname=payee_t['imbalance_new_account'])
        # pprint(replacement_list)
#        pprint('-' * 80)
        # exit()

        utilities = mybook.accounts.get(fullname='Expenses:Utilities')

        # For each transaction, go through the list.

        for transaction in mybook.transactions:

            found_match = False
#            pprint('-' * 90)
#            if 'Education' in transaction.description:
#                pprint(transaction.description)
#            pprint(transaction.splits)

            for replacement in replacement_list:

                #pprint(replacement['orig_regex_comp'])

                if (replacement['orig_regex_comp'].search(transaction.description)):
                    # Now, the transaction matches the regex
                    found_match = True
#                    pprint ('found replacement: before:')
#                    pprint(transaction.description)
#                    pprint(transaction.splits)

                    if replacement['payee'] != '':
                        modify_description(transaction, replacement['payee'])

                    if replacement['imbalance_new_account_t']:
                        modify_category(
                            transaction, replacement['imbalance_new_account_t'])

                # Now the description is fixed
                if transaction.description == replacement['payee']:
                    # here, the 'Discover' in the gnucash DB is the 'Discover' in the csv
                    if replacement['memo']:
                        add_memo(transaction, replacement['imbalance_new_account'], replacement['memo'])

#                    print('replacement')
#                    pprint(replacement)
#                    print('after:')
#                    pprint(transaction)
#                    pprint(transaction.splits)
#                    exit()

                    # bail out of for loop if found a match
                    continue

        mybook.flush()

#    print(ledger(mybook))

        mybook.save()


if __name__ == '__main__':
    main()
